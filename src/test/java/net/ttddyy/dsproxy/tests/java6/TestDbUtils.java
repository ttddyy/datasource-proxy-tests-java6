package net.ttddyy.dsproxy.tests.java6;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

/**
 * Database Utility for test.
 *
 * @author Tadaya Tsuyukubo
 */
public class TestDbUtils {

	private TestDbUtils() {
	}

	public static void populateInitialData(DataSource dataSource) {
		executeQuery(dataSource,
				"drop table if exists emp;",
				"create table emp ( id integer primary key, name varchar(10) );",
				"insert into emp ( id, name ) values (1, 'foo');",
				"insert into emp ( id, name ) values (2, 'bar');"
		);

		executeQuery(dataSource,
				"drop table if exists emp_with_auto_id;",
				"create table emp_with_auto_id ( id integer generated by default as identity primary key, name varchar(10) );",
				"ALTER TABLE emp_with_auto_id ALTER COLUMN id RESTART WITH 1;",  // make sequence start from 1
				"insert into emp_with_auto_id ( name ) values ('foo');",
				"insert into emp_with_auto_id ( name ) values ('bar');"
		);
	}

	public static void executeQuery(DataSource dataSource, String... queries) {
		Connection conn = null;
		Statement stmt = null;
		try {
			conn = dataSource.getConnection();
			stmt = conn.createStatement();
			for (String query : queries) {
				stmt.execute(query);
			}
		}
		catch (SQLException e) {
			throw new RuntimeException(e);
		}
		finally {
			if (stmt != null) {
				try {
					stmt.close();
				}
				catch (SQLException e) {
					throw new RuntimeException(e);
				}
			}
			if (conn != null) {
				try {
					conn.close();
				}
				catch (SQLException e) {
					throw new RuntimeException(e);
				}
			}
		}
	}

	public static void shutdown(DataSource dataSource) throws Exception {
		// TODO: cleanup
		executeQuery(dataSource, "shutdown;");
	}

	public static int countTable(DataSource dataSource, String tableName) throws Exception {
		Connection conn = dataSource.getConnection();
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery("select count(*) from " + tableName);
		rs.next();

		int count = rs.getInt(1);

		rs.close();
		stmt.close();
		conn.close();

		return count;
	}

	public static int[] executeBatchStatements(DataSource dataSource, String... queries) throws Exception {
		Connection conn = dataSource.getConnection();
		Statement stmt = conn.createStatement();

		try {
			for (String query : queries) {
				stmt.addBatch(query);
			}
			return stmt.executeBatch();
		}
		finally {
			try {
				stmt.close();
			}
			finally {
				conn.close();
			}
		}
	}

}
